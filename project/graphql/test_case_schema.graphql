type Input
  {
  }

type Output
  {
  }

type Precondition
  {
  }

type SemanticSmokeTestCase
  {
    name: String
    id: Uriorcurie!
    description: String
    preconditions: [Precondition]
    inputs: [SemanticSmokeTestInput]!
    outputs: [SemanticSmokeTestOutput]!
  }

type SemanticSmokeTestInput
  {
    mustPassDate: Date
    mustPassEnvironment: EnvironmentEnum
    query: String
    stringEntry: String
    direction: DirectionEnum
    answerInformalConcept: String
    expectedResult: ExpectedResultsEnum
    curie: Curie
    topLevel: String
    node: String
    notes: String
  }

type SemanticSmokeTestOutput
  {
  }

type TestCase
  {
    name: String
    id: Uriorcurie!
    description: String
    inputs: [Input]
    outputs: [Output]
    preconditions: [Precondition]
  }

type TestSuite
  {
    entries: [TestCase]
  }

